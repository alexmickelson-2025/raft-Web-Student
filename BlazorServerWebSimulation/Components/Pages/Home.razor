@page "/"
@rendermode InteractiveServer
@using Simulation
@using library
@* @implements IDisposable *@

<PageTitle>Home</PageTitle>

<h1>Raft Simulation</h1>

@if (!isRunning)
{
    <button class="btn btn-primary" @onclick="startSimulation">Start Simulation</button>
}@* 
    //I don't know how to stop the simulation yet.
else
{
    <button class="btn btn-danger" @onclick ="stopSimulation"> Stop Simulation </button >
} *@

@* //the sliders come from his label for="speed" election tmeout between code *@

<div class="row">
    @foreach(var node in nodes) {
        <div class="p-3 col-4 row">
            <div class="@StateClass(node) border p-3 rounded">
                <p>Node @node.Id</p>
                <p>Term @node.CurrentTerm</p>
                <p>State @node.State</p>
                <p>Current leader @node?.RecognizedLeader?.Id</p>
                <p>Election Timeout @node?.ElectionTimeout miliseconds</p>
                @if (node?.State != States.Leader) {
                    <p>Time since hearing from leader @node?.InnerNode.timeSinceHearingFromLeader.ElapsedMilliseconds</p>
                    <p>Time until it will start an election: @(node.ElectionTimeout - node.InnerNode.timeSinceHearingFromLeader.ElapsedMilliseconds)</p>
                }
            </div>
            @if(node.IsPaused) {
                <button class="btn btn-outline-dark" onclick="">Resume</button>
            }
            else {
                <button class="btn btn-outline-dark" onclick="pause(@node)">Pause</button>
            }
        </div>
    }
</div>

<div class= "row">
    <div class= "col">
        <div>
            <label for= "speed">
                Election timeout between @(FormatMilliSeconds(150 * ElectionTimeoutAdjustment)) and 
                @(FormatMilliSeconds(300 * ElectionTimeoutAdjustment)) seconds 
            </label>

            <input type="range" id="speed" name ="speed" min="1" max ="150"
            @bind-value=ElectionTimeoutAdjustment @oninput="UpdateElectionTimeouts"/>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <div>
            <label for="network">
                Network Delay @(FormatMilliSeconds(NetworkDelay)) seconds
            </label>

            <input type="range" id="network" name="speed" min="0" max="15000000"
            @bind-value=NetworkDelay @oninput="UpdateNetworkDelay" />
        </div>
    </div>
</div>
<p>Note: I know the network delay doesn't appear to be doing anything, but I am not sure why. I have written tests (that fail haha) and tried my best to get it to logically apply </p>

@code {
    Boolean isRunning = false;
    int ElectionTimeoutAdjustment { get; set; }
    int NetworkDelay { get; set; }
    List<SimulationNode>? nodes = [];

    void startSimulation() {
        isRunning = true;
        //he doesn't want references to the exact node because we want the abstraction through the simulation
        var node1 = new Server(true, true); //does this mean new Server in my code?
        node1.Id = 1;
        var node2 = new Server(true, true);
        node2.Id = 2;
        var node3 = new Server(true, true);
        node3.Id = 3;

        var simulation1 = new SimulationNode(node1);
        var simulation2 = new SimulationNode(node2);
        var simulation3 = new SimulationNode(node3);

        node1.OtherServersList = [simulation2, simulation3];
        node2.OtherServersList = [simulation1, simulation3];
        node3.OtherServersList = [simulation1, simulation2];

        nodes = [simulation1, simulation2, simulation3];

        var timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 100);
    }

    public void stopSimulation() {
        //I don't know what to do to stop it yet. Maybe set the election 
    }

    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }

    public void UpdateElectionTimeouts() {
        if (nodes is null) {
            throw new Exception("nodes (simulation) should not have been null!! Exception thrown from UpdateElectionTimeouts function");
        }
        foreach (var simulation in nodes) {
            simulation.ElectionTimeoutAdjustmentFactor = this.ElectionTimeoutAdjustment;
            simulation.ResetElectionTimeout();
        }
    }

    public void UpdateNetworkDelay()
    {
        if (nodes is null)
        {
            throw new Exception("nodes (simulation) should not have been null!! Exception thrown from UpdateElectionTimeouts function");
        }
        foreach (var simulation in nodes)
        {
            simulation.NetworkDelay = this.NetworkDelay;
            simulation.ResetElectionTimeout();
        }
    }

    string StateClass(IServer node)
    {
        if (node.State == States.Leader)
            return "text-primary";
        if (node.State == States.Candidate)
            return "text-warning";
        if (node.State == States.Follower)
            return "text-body-secondary";
        return "";
    }

    public void pause(SimulationNode node)  {
        Console.WriteLine("Pause simulation was called");
        node.PauseSimulation();
    }
}
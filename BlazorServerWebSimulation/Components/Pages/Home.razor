@page "/"
@rendermode InteractiveServer
@using Simulation
@using library
@* @implements IDisposable *@

<PageTitle>Home</PageTitle>

<h1>Raft Simulation</h1>

@if (!isRunning)
{
    <button class="btn btn-primary" @onclick="startSimulation">Start Simulation</button>
}
else
{
    <button class="btn btn-danger" @onclick ="stopSimulation"> Stop Simulation </button >
}

Welcome to your new app.
<button @onclick="startSimulation">start</button>

@* //the sliders come from his label for="speed" election tmeout between code *@

@foreach(var node in nodes) {
    <div class="p-3 col-4">
        <div class="border p-3 rounded">
            <p>Node @node.Id</p>
            <p>Term @node.CurrentTerm</p>
            <p>State @node.State</p>
            <p>Current leader @node?.RecognizedLeader?.Id ?? was null</p>
        </div>
    </div>
}

@code {
    Boolean isRunning = false;
    List<SimulationNode>? nodes = [];

    void startSimulation() {
        //he doesn't want references to the exact node because we want the abstraction through the simulation
        var node1 = new Server(true, true); //does this mean new Server in my code?
        node1.Id = 1;
        var node2 = new Server(true, true);
        node2.Id = 2;
        var node3 = new Server(true, true);
        node3.Id = 3;


        //TODO: Next steps will be to change SimulationNode so it implements IServer instead of Server.
        //TODO: but first I'm going to need to make sure my IServer interface contains every funciton it needs
        //Or I could get my tests to pass first ...
        var simulation1 = new SimulationNode(node1);
        var simulation2 = new SimulationNode(node2);
        var simulation3 = new SimulationNode(node3);

        node1.OtherServersList = [simulation2, simulation3];
        node2.OtherServersList = [simulation1, simulation3];
        node3.OtherServersList = [simulation1, simulation2];

        nodes = [simulation1, simulation2, simulation3];
        
       var timer = new Timer(_ =>
       {
           InvokeAsync(StateHasChanged);
       }, null, 0, 200);
    }

    public void stopSimulation() {

    }
}
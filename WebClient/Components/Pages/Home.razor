@page "/"
@rendermode InteractiveServer
@using System.Collections.Concurrent
@using System.Text.Json
@using library

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
@if (Urls is not null) {
    foreach (var url in Urls) {
        <p>Url @url</p>
    }
}
else {
    <div>Urls is null</div>
}

<p>Welcome to your new app. This front end shows node status </p>

This is where i displayed node status
<div class="row">
    @foreach(var node in data) {
        <div class="p-3 col-4 row">
            <div class="border p-3 rounded">
                <p>Node @node.Value.Id</p>
                <p>Term @node.Value.Term</p>
                <p>State @node.Value.State</p>
                <p>Current leader @node.Value.CurrentTermLeader?.Id</p>
                <p>Election Timeout @node.Value.ElectionTimeout miliseconds</p>
            </div>

            <div class="p-3">
                <h3>Display the current state machine state on each node</h3>
                @if(node.Value?.StateDictionary?.Count == 0) {
                    <p>No data in State yet</p>
                } 
                else {
                    <table class="table-striped">
                        <thead>
                            <tr>
                                <td>Key</td>
                                <td>Value</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in node.Value.StateDictionary) {
                                <tr>
                                    <td>@item.Key</td>
                                    <td>@item.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }


                <p>Highest committed index is: @node.Value.CommittedEntryIndex</p>
                <h5>Committed Logs (@node.Value.CommittedEntryIndex):</h5>
                @for(int i = 0; i < node.Value.CommittedEntryIndex; i++) {
                    <p>Key: @node.Value.Log[i].Command.Item1, Value: @node.Value.Log[i].Command.Item2</p>
                    <p>Previous Term: @node.Value.Log[i].PreviousLogTerm</p>
                    <p>Previous Log Index: @node.Value.Log[i].PreviousLogIndex</p>
                    <p>Current Log Index: @i (also recorded as @node.Value.Log[i].LogIndex)</p>
                    <p>Current Term: @node.Value.Log[i].TermNumber</p>
                    <p>Log is committed</p>
                }

                <h5>Uncommitted Logs: (@(node.Value.Log.Count() - node.Value.CommittedEntryIndex))</h5>
                <p>Have count @node.Value.Log.Count()</p>

                @for (int i = @node.Value.CommittedEntryIndex; i < node.Value.Log.Count(); i++)
                {
                    <p>Key: @node.Value.Log[i].Command.Item1, Value: @node.Value.Log[i].Command.Item2</p>
                    <p>Previous Term: @node.Value.Log[i].PreviousLogTerm</p>
                    <p>Previous Log Index: @node.Value.Log[i].PreviousLogIndex</p>
                    <p>Current Log Index: @i (also recorded as @node.Value.Log[i].LogIndex)</p>
                    <p>Current Term: @node.Value.Log[i].TermNumber</p>
                    <p>Command: @node.Value.Log[i].Command.Item1 =>  @node.Value.Log[i].Command.Item2</p>
                    <p>Log is <i>NOT</i> committed</p>
                }
            </div>
        </div>
    }
</div>

<div class="col">
    <div class="border p-3 rounded-3">
        <label>
            Key <input class="form-control" @bind=userInputKey />
        </label>
        <label>
            Value <input class="form-control" @bind=userInputValue />
        </label>
        <hr>
        @foreach (var node in data)
        {
            <button class="btn btn-outline-primary mx-1" @onclick="() => SendCommand(node.Key)"> Send to Node @node.Value.Id</button>
        }
        <div>
            Status of message: @commandStatus
        </div>
    </div>

    @* < div class= "bg-body-secondary my-3 p-1 rounded-3" >
        < strong > LOG </ strong >
        @foreach(var(log, index) in node.InnerNode.Log.Select((l, i) => (l, i)))
        {
        < div class=@(index <= node.InnerNode.CommittedEntryIndex ? "text-success" : "") >
            @log.TermId - @log.Key: @log.Value
        </ div >
        }
    </ div > *@
</div>

@code {
    string userInputKey = "";
    string userInputValue = "";
    string commandStatus = "";

    NodeData tempNode = new();
    ConcurrentDictionary<string, NodeData> data = [];
    string TermClass(NodeData node) =>   "";
    string[] Urls = Environment.GetEnvironmentVariable("NODE_URLS").Split(',');
    HttpClient http = new();
    private Timer? timer;
    protected override void OnInitialized() {
        Console.WriteLine("Loading page, trying to parse urls");
        Console.WriteLine("Urls has count " + Urls?.Count() ?? "null");

        Timer timer= new Timer(async _ => {
            await Task.WhenAll(Urls.Select(async url => {
                try 
                {
                    var willSendURL = url + "/nodeData";
                    Console.WriteLine("about to send request to " + willSendURL);
                    var response = await http.GetStringAsync(url + "/nodeData");
                    Console.WriteLine($"Response from {url} asking for node data: {response}");

                    var nodeData= await http.GetFromJsonAsync<NodeData>(url + "/nodeData");
                    Console.WriteLine($"Node Data: {nodeData.ToString()}");
                    if (nodeData != null) {
                        Console.WriteLine("We got inside the if block for each node data");
                        data[url] = nodeData;
                    }
                    else {
                        Console.WriteLine("did not get data for " + url);
                    }
                }
                catch(HttpRequestException ex) {
                    Console.WriteLine($"node {url} is down in ONInitialized Function, error " +ex.Message.ToString());
                    data.TryRemove(url, out var removedNodeData);
                }
                catch (JsonException ex)
                {
                    Console.WriteLine($"JsonException for {url}: {ex.Message}");
                    data.TryRemove(url, out var removedNodeData);
                }
            }).ToArray()
            );
            await InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    public string StateClass(IServer node)
    {
        if (node.State == States.Leader)
            return "text-primary";
        if (node.State == States.Candidate)
            return "text-warning";
        if (node.State == States.Follower)
            return "text-body-secondary";
        return "";
    }

    async Task SendCommand(string destinationUrl)
    {
        commandStatus = "sending";
        HttpClient client = new();
        try {
            await client.PostAsJsonAsync(destinationUrl + "/receive/command", (userInputKey, userInputValue));
        }
        catch (Exception ex) {
            Console.WriteLine("Error sending client command to " + destinationUrl + " : " + ex.Message.ToString());
        }
        commandStatus = "sent";
    }
}
